import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.Random;

import javax.swing.plaf.synth.SynthSplitPaneUI;

public class SeamCarver {

	static String imgPath = "birb.jpg";
	static int removePixels = 100;

	static float[][] dual_gradient_energy(ImageData img) {
		// TODO
		/*
		 * a W x H array of floats, the energy at each pixel in img.
		 * 
		 * 
		 * 
		 * The Gradient for the point (x, y) is calculated by adding the square of the x
		 * gradient of the point (x, y) and the square of the y gradient of the point
		 * (x, y):
		 * 
		 * energy(x, y) = Δx2(x, y) + Δy2(x, y)
		 * 
		 * The x gradient of the point is defined as Δx^2(x, y) = Rx(x, y)^2 + Gx(x,
		 * y)^2 + bx(x, y)^2
		 * 
		 * Where Rx(x, y), Gx(x, y), Bx(x, y) are the absolute differences in the color
		 * channels of points (x+1, y) and (x-1, y)
		 * 
		 * The y gradient of the point is defined as Δy^2(x, y) = Ry(x, y)^2 + Gy(x,
		 * y)^2 + By(x, y)^2
		 * 
		 * Where Ry(x, y), Gy(x, y), By(x, y) are the absolute differences in the color
		 * channels of points (x+1, y) and (x-1, y)
		 * 
		 * If the pixel is a border pixel the calculate the gradient using wrap-around
		 * 
		 * Example: If a pixel is on the left border calculate the gradient using (1,
		 * y)as the right neighbor and (W-1, y) as the left neighbor (pixel on RIGHT
		 * border with equal y)
		 *
		 *
		 * Should be able to be completed with dynamic programming (not sure how yet.
		 * Can't figure out optimal subproblem)
		 * 
		 */

		int W = img.getWidth();
		int H = img.getHeight();

		int[][] sobelHoriz = { { 1, 0, -1 }, { 1, 0, -1 }, { 1, 0, -1 } };

		int[][] sobelVert = { { 1, 1, 1 }, { 0, 0, 0 }, { -1, -1, -1 } };

		float[][] energyMap = new float[img.getWidth()][img.getHeight()];

		for (int col = 0; col < W; col++) { // j
			for (int row = 0; row < H; row++) { // i

				// [0] = horizontal, [1] = vertical
				float[] redGradient = new float[2];
				float[] blueGradient = new float[2];
				float[] greenGradient = new float[2];

				for (int k = -1; k <= 1; k++) {
					for (int l = -1; l <= 1; l++) {

						if (row + l >= H || row + l < 0) {
							break;
						}

						if (col + k >= W || col + k < 0) {
							break;
						}
						redGradient[0] += img.getRed(col + k, row + l) * sobelHoriz[k + 1][l + 1];
						redGradient[1] += img.getRed(col + k, row + l) * sobelVert[k + 1][l + 1];

						blueGradient[0] += img.getBlue(col + k, row + l) * sobelHoriz[k + 1][l + 1];
						blueGradient[1] += img.getBlue(col + k, row + l) * sobelVert[k + 1][l + 1];

						greenGradient[0] += img.getGreen(col + k, row + l) * sobelHoriz[k + 1][l + 1];
						greenGradient[1] += img.getGreen(col + k, row + l) * sobelVert[k + 1][l + 1];
					}
				}

				energyMap[col][row] = (float) (Math.sqrt(Math.pow(redGradient[0], 2) + Math.pow(redGradient[1], 2))
						+ Math.sqrt(Math.pow(blueGradient[0], 2) + Math.pow(blueGradient[1], 2)) 
						+ Math.sqrt(Math.pow(greenGradient[0], 2) + Math.pow(greenGradient[1], 2)));

			}
		}

		return energyMap;
	}

	public static int[] find_seam(ImageData img) {
		// TODO: The returned array will contain the x values (column) of the pixels to
		// be removed.
		// This can be implemented using dynamic programming. Similar to the rod cutting
		// problem, just with minimum instead of maximum
		int height = img.getHeight(); // rows
		int width = img.getWidth(); // cols

		float[][] energyMap = dual_gradient_energy(img);

		float[][] seamSums = new float[width][height];

		for (int x = 0; x < width; x++) { // Set base values to build up from
			seamSums[x][0] = energyMap[x][0];
		}

		for (int row = 1; row < height; row++) {
			for (int col = 0; col < width; col++) {

				float min = Float.MAX_VALUE;

				for (int i = -1; i <= 1; i++) {
					if (col + i < 0 || col + i >= width) { // if the offset puts the index out of bounds, skip it
						continue;
					}

					if (energyMap[col + i][row - 1] < min) {
						min = energyMap[col + i][row - 1];
					}
				}

				seamSums[col][row] += min;
			}
		}

		return backtrack(seamSums, height, width);
	}

	private static int[] backtrack(float[][] seamSums, int height, int width) {
		int[] seam = new int[height];

		float min = Float.MAX_VALUE;

		for (int k = 0; k < width; k++) {
			if (seamSums[k][height - 1] < min) {
				min = seamSums[k][height - 1];
				seam[height - 1] = k;
			}
		}

		for (int row = height - 2; row >= 0; row--) {
			min = Float.MAX_VALUE; // Reuse the same variable. No reason why there couldn't be a ew one

			for (int i = -1; i <= 1; i++) {

				if (seam[row + 1] + i < 0 || seam[row + 1] + i >= width) { // if the offset puts the index out of
																			// bounds, skip it
					continue;

				}

				int prevCol = seam[row + 1];

				if (seamSums[prevCol + i][row] < min) {
					min = seamSums[prevCol + i][row];
					seam[row] = prevCol + i;
				}
			}
		}

		return seam; // TODO: Return Real Value
	}

	static void plot_seam(ImageData img, int[] seam) {
		for (int y = 0; y < img.getHeight(); y++) {

			img.setPixel(seam[y], y, Pixel.getIntColor(1.0f, 0.0f, 0.0f));
		}

	}

	static void remove_seam(ImageData img, int[] seam) {
		int height = img.getHeight();
		
		int origWidth = img.getWidth();
		int newWidth = origWidth-1;
		
		for(int row = 0; row < height; row++) {			
			
			for(int newColumn = seam[row], origColumn = seam[row] + 1; newColumn < newWidth; newColumn++, origColumn++) {
				img.setPixel(newColumn, row, img.getPixel(origColumn, row));
			}
		}
		
		img.trimRight();
	}

	static float max(float[][] a) {
		float m = a[0][0];
		for (int r = 0; r < a.length; r++) { //
			for (int k = 0; k < a[0].length; k++) //
				if (a[r][k] > m) { // finds a max value
					m = a[r][k]; //

				}
		}

		return m;
	}

	static int map(float x, float in_min, float in_max, int out_min, int out_max) {
		return (int) Math.floor((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
	}

	public static void main(String[] args) {
		ImageData s = new ImageData(imgPath);

		// float[][] energy = dual_gradient_energy(s);
		// // float max = max(energy);
		//
		// for (int i = 0; i < energy.length; i++) {
		// for (int j = 0; j < energy[0].length; j++) {
		//
		// int val = Pixel.getIntColor(energy[i][j], energy[i][j], energy[i][j]);
		//
		// System.out.println(val);
		//
		// s.setPixel(i, j, val);
		//
		// }
		// }
		
		
		
		int[][] seams = new int[removePixels][s.getHeight()];
		//s.TransPose();

		new ImageDisplay(s.img);
		
		for(int i = 0; i < removePixels; i ++) {
			System.out.println(i);
			seams[i] = find_seam(s);
			remove_seam(s, seams[i]);
		}
		
		new ImageDisplay(s.img);
		
		ImageData plot = new ImageData(imgPath);
		//plot.TransPose();
		
		for(int[] seam : seams) {			
			plot_seam(plot, seam);
		}
		
		new ImageDisplay(plot.img);

		// System.out.println("Max: " + max);

		// plot_seam(s,a);
		//
		// new ImageDisplay(s.img);
		//
		// s.TransPose();
		//
		// plot_seam(s,a);
		//
		// new ImageDisplay(s.img);

	}
}