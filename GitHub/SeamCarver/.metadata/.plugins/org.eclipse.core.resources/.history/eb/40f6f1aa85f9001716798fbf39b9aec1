import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.Random;

public class SeamCarver {

	static float[][] dual_gradient_energy(ImageData img){
		// TODO
		/*  a W x H array of floats, the energy at each pixel in img. 
		 * 
		 * 
		 * 
		 * The Gradient for the point (x, y) is calculated by
		 * adding the square of the x gradient of the point (x, y) 
		 * and the square of the y gradient of the point (x, y):
		 * 
		 * energy(x, y) = Δx2(x, y) + Δy2(x, y)
		 * 
		 * The x gradient of the point is defined as 
		 * Δx^2(x, y) = Rx(x, y)^2 + Gx(x, y)^2 + bx(x, y)^2
		 * 
		 * 		Where Rx(x, y), Gx(x, y), Bx(x, y) are the absolute
		 * 		differences in the color channels of points (x+1, y) 
		 * 		and (x-1, y)
		 * 
		 * The y gradient of the point is defined as 
		 * Δy^2(x, y) = Ry(x, y)^2 + Gy(x, y)^2 + By(x, y)^2
		 * 
		 * 		Where Ry(x, y), Gy(x, y), By(x, y) are the absolute 
		 * 		differences	in the color channels of points (x+1, y) 
		 * 		and (x-1, y)
		 * 
		 * If the pixel is a border pixel the calculate the gradient 
		 * using wrap-around
		 * 
		 * 		Example: If a pixel is on the left border calculate the 
		 * 		gradient using (1, y)as the right neighbor and (W-1, y) 
		 * 		as the left neighbor (pixel on RIGHT border with equal y)
		 *
		 *
		 * Should be able to be completed with dynamic programming 
		 * (not sure how yet. Can't figure out optimal subproblem)
		 * 
		 */
		
		
		int W = img.getWidth();
		int H = img.getHeight();
		
		int[][] sobelHoriz = {{-1, 0, 1},
							  {-2, 0, 2},
							  {-1, 0, 1}};
		
		int[][] sobelVert = {{-1, -2, -1},
							 { 0,  0,  0},
							 { 1,  2,  1}};
		
		
		float[][] energyMap = new float[img.getWidth()][img.getHeight()];
	
		
		for(int col = 0; col < W; col++) { // j
			for(int row = 0; row < H; row++) { // i
				
				//[0] = horizontal, [1] = vertical
				float[] redGradient = new float[2];  
				float[] blueGradient = new float[2];
				float[] greenGradient = new float[2];
				
				for(int k = -1; k <= 1; k++) {
					for(int l = -1; l <= 1; l++) {
						
						if(row + l >= H || row + l < 0) {
							break;
						}
						
						if(col + k >= W || col + k < 0) {
							break;
						}
						redGradient[0] += img.getRed(col + k, row + l) * sobelHoriz[k+1][l+1];
						redGradient[1] += img.getRed(col + k, row + l) * sobelVert[k+1][l+1];
						
						blueGradient[0] += img.getBlue(col + k, row + l) * sobelHoriz[k+1][l+1];
						blueGradient[1] += img.getBlue(col + k, row + l) * sobelVert[k+1][l+1];
						
						greenGradient[0] += img.getGreen(col + k, row + l) * sobelHoriz[k+1][l+1];
						greenGradient[1] += img.getGreen(col + k, row + l) * sobelVert[k+1][l+1];
					}
				}
				
				energyMap[col][row] = (float)( Math.sqrt(Math.pow(redGradient[0], 2) + Math.pow(redGradient[0], 2)) +
											   Math.sqrt(Math.pow(blueGradient[0], 2) + Math.pow(blueGradient[0], 2)) +
											   Math.sqrt(Math.pow(greenGradient[0], 2) + Math.pow(greenGradient[0], 2)));
				
				
			}
		}
		
		
		return energyMap;
	}
	
	public 
	
	int[] find_seam(ImageData img){
		//TODO: The returned array will contain the x values (column) of the pixels to be removed. 
		// This can be implemented using dynamic programming. Similar to the rod cutting problem, just with minimum instead of maximum
		return null;
	}
	
	static void plot_seam(ImageData img, int[] seam){
		int x = img.getWidth()/2; // This offset is just a burner operation. Once seam is implemented there will not need to be an offset
		int y = 0;
		Random rand = new Random();
		for(int j = 0; j<img.getHeight(); j++, y++){
			
			//TODO: Burner line; This is where the values in seam will be added to the image
			x += rand.nextBoolean() ? -1: 1;
			
			img.setPixel(x, y, Pixel.getIntColor(1.0f, 0.0f, 0.0f));
		}
	
	}
	
	void remove_seam(ImageData img,  int[] seam){
		//TODO
		
	}
	
	static float max(float[][] a) {
		float m = a[0][0];
		for (int r = 0; r < a.length; r++) { //
			for (int k = 0; k < a[0].length; k++) //
				if (a[r][k] > m) { // finds a max value
					m = a[r][k]; //

				}
		}

		return m;
	}
	
	static int map(float x, float in_min, float in_max, int out_min, int out_max) {
		return (int) Math.floor((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
	}
	
	public static void main(String[] args) {
		ImageData s =  new ImageData("Test.jpg");
		
		int[] a = new int[2];
		
		float[][] energy = dual_gradient_energy(s);
		//float max = max(energy);
		
		for(int i = 0; i < energy.length; i++) {
			for(int j= 0; j < energy[0].length; j++){
				
				int val = Pixel.getIntColor(energy[i][j], energy[i][j], energy[i][j]);
				
				System.out.println(val);
				
				s.setPixel(i,  j, val);
				
				
			}
		}
		
		new ImageDisplay(s.img);
		
		//System.out.println("Max: " + max);
		
//		plot_seam(s,a);
//	
//		new ImageDisplay(s.img);
//		
//		s.TransPose();
//		
//		plot_seam(s,a);
//		
//		new ImageDisplay(s.img);
		
		
		
		}
}